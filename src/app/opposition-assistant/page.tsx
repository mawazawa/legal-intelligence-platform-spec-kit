"use client";

import React, { useState } from 'react';
import { Loader2, FileText, CheckCircle, AlertCircle, Copy, Download } from 'lucide-react';

interface Evidence {
  id: string;
  content: string;
  source: string;
  similarity: number;
  metadata: Record<string, unknown>;
}

interface Opposition {
  paragraphs: string[];
  citations: string[];
  exhibits: Array<{
    label: string;
    description: string;
    sourceId: string;
  }>;
  legalStandards: string[];
}

interface OppositionResult {
  claim: string;
  opposition: Opposition;
  evidence: Evidence[];
  metadata: {
    processingTime: number;
    evidenceCount: number;
    model: string;
  };
}

export default function OppositionAssistantPage() {
  const [claim, setClaim] = useState('');
  const [caseNumber, setCaseNumber] = useState('FDI-21-794666');
  const [respondentName, setRespondentName] = useState('Mathieu Wauters');
  const [petitionerName, setPetitionerName] = useState('');

  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<OppositionResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!claim.trim()) {
      setError('Please enter a claim to oppose');
      return;
    }

    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch('/api/opposition/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          claim: claim.trim(),
          caseContext: {
            caseNumber: caseNumber.trim() || undefined,
            respondentName: respondentName.trim() || undefined,
            petitionerName: petitionerName.trim() || undefined,
            courtName: 'San Francisco Superior Court'
          },
          maxEvidence: 10,
          threshold: 0.6
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate opposition');
      }

      const data: OppositionResult = await response.json();
      setResult(data);

    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      console.error('Opposition generation error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const exportAsText = () => {
    if (!result) return;

    const text = `OPPOSITION TO CLAIM
Case: ${caseNumber}
Respondent: ${respondentName}
Generated: ${new Date().toLocaleDateString()}

OPPOSING PARTY'S CLAIM:
${result.claim}

OPPOSITION:
${result.opposition.paragraphs.join('\n\n')}

LEGAL STANDARDS:
${result.opposition.legalStandards.join('\n')}

CITATIONS:
${result.opposition.citations.join('\n')}

EXHIBITS:
${result.opposition.exhibits.map(e => `${e.label}: ${e.description}`).join('\n')}

SUPPORTING EVIDENCE (${result.evidence.length} documents):
${result.evidence.map((e, i) => `
${i + 1}. Source: ${e.source}
   Relevance: ${(e.similarity * 100).toFixed(1)}%
   Content: ${e.content.substring(0, 300)}...
`).join('\n')}

Generated by Legal Intelligence Platform
Processing Time: ${result.metadata.processingTime}ms
Model: ${result.metadata.model}
`;

    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `opposition_${caseNumber}_${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Opposition Filing Assistant
          </h1>
          <p className="text-lg text-gray-600">
            AI-powered opposition generation with evidence-based citations
          </p>
        </div>

        {/* Input Form */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <form onSubmit={handleSubmit}>
            {/* Case Context */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Case Number
                </label>
                <input
                  type="text"
                  value={caseNumber}
                  onChange={(e) => setCaseNumber(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="FDI-21-794666"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Respondent Name
                </label>
                <input
                  type="text"
                  value={respondentName}
                  onChange={(e) => setRespondentName(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Your name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Petitioner Name
                </label>
                <input
                  type="text"
                  value={petitionerName}
                  onChange={(e) => setPetitionerName(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Opposing party name"
                />
              </div>
            </div>

            {/* Claim Input */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Opposing Party&apos;s Claim
                <span className="text-gray-500 ml-2 font-normal">
                  (Enter the false or misleading claim you want to oppose)
                </span>
              </label>
              <textarea
                value={claim}
                onChange={(e) => setClaim(e.target.value)}
                rows={6}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                placeholder='Example: "Respondent did not preserve tax forms as required by California Family Code ยง2621"'
              />
              <div className="flex justify-between items-center mt-2">
                <span className="text-sm text-gray-500">
                  {claim.length} / 2000 characters
                </span>
                <button
                  type="submit"
                  disabled={isLoading || !claim.trim()}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <FileText className="w-4 h-4" />
                      Generate Opposition
                    </>
                  )}
                </button>
              </div>
            </div>
          </form>
        </div>

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-start gap-3">
            <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div>
              <h3 className="font-semibold text-red-900">Error</h3>
              <p className="text-red-700">{error}</p>
            </div>
          </div>
        )}

        {/* Results Display */}
        {result && (
          <div className="space-y-6">
            {/* Success Banner */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
              <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <h3 className="font-semibold text-green-900">Opposition Generated Successfully</h3>
                <p className="text-green-700 text-sm">
                  Found {result.evidence.length} pieces of supporting evidence in {result.metadata.processingTime}ms
                </p>
              </div>
              <button
                onClick={exportAsText}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2 transition-colors"
              >
                <Download className="w-4 h-4" />
                Export
              </button>
            </div>

            {/* Opposition Paragraphs */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-gray-900">Opposition Statement</h2>
                <button
                  onClick={() => copyToClipboard(result.opposition.paragraphs.join('\n\n'), 'paragraphs')}
                  className="px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center gap-2 transition-colors"
                >
                  <Copy className="w-4 h-4" />
                  {copiedSection === 'paragraphs' ? 'Copied!' : 'Copy'}
                </button>
              </div>
              <div className="prose max-w-none">
                {result.opposition.paragraphs.map((para, idx) => (
                  <p key={idx} className="mb-4 text-gray-800 leading-relaxed">
                    {para}
                  </p>
                ))}
              </div>
            </div>

            {/* Legal Standards */}
            {result.opposition.legalStandards.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold text-gray-900">Legal Standards</h2>
                  <button
                    onClick={() => copyToClipboard(result.opposition.legalStandards.join('\n'), 'standards')}
                    className="px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center gap-2 transition-colors"
                  >
                    <Copy className="w-4 h-4" />
                    {copiedSection === 'standards' ? 'Copied!' : 'Copy'}
                  </button>
                </div>
                <ul className="space-y-2">
                  {result.opposition.legalStandards.map((standard, idx) => (
                    <li key={idx} className="text-gray-700 font-mono text-sm">
                      {standard}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Citations */}
            {result.opposition.citations.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold text-gray-900">Citations</h2>
                  <button
                    onClick={() => copyToClipboard(result.opposition.citations.join('\n'), 'citations')}
                    className="px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center gap-2 transition-colors"
                  >
                    <Copy className="w-4 h-4" />
                    {copiedSection === 'citations' ? 'Copied!' : 'Copy'}
                  </button>
                </div>
                <ul className="space-y-2">
                  {result.opposition.citations.map((citation, idx) => (
                    <li key={idx} className="text-gray-700 text-sm">
                      {citation}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Exhibits */}
            {result.opposition.exhibits.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">Suggested Exhibits</h2>
                <div className="space-y-3">
                  {result.opposition.exhibits.map((exhibit, idx) => (
                    <div key={idx} className="border border-gray-200 rounded-lg p-4">
                      <div className="font-semibold text-gray-900">{exhibit.label}</div>
                      <div className="text-sm text-gray-600 mt-1">{exhibit.description}</div>
                      <div className="text-xs text-gray-500 mt-2 font-mono">
                        Source ID: {exhibit.sourceId}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Supporting Evidence */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-4">
                Supporting Evidence ({result.evidence.length} documents)
              </h2>
              <div className="space-y-4">
                {result.evidence.slice(0, 5).map((evidence, idx) => (
                  <div key={evidence.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div className="font-semibold text-gray-900">
                        {idx + 1}. {evidence.source}
                      </div>
                      <div className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-semibold">
                        {(evidence.similarity * 100).toFixed(1)}% match
                      </div>
                    </div>
                    <div className="text-sm text-gray-700 bg-gray-50 p-3 rounded mt-2 font-mono">
                      {evidence.content.substring(0, 400)}
                      {evidence.content.length > 400 && '...'}
                    </div>
                    {typeof evidence.metadata.date === 'string' && (
                      <div className="text-xs text-gray-500 mt-2">
                        Date: {evidence.metadata.date}
                      </div>
                    )}
                  </div>
                ))}
                {result.evidence.length > 5 && (
                  <div className="text-center text-gray-500 text-sm">
                    + {result.evidence.length - 5} more evidence documents
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Help Text */}
        {!result && !isLoading && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 className="font-semibold text-blue-900 mb-2">How It Works</h3>
            <ol className="list-decimal list-inside space-y-2 text-blue-800 text-sm">
              <li>Enter the opposing party&apos;s claim that you want to refute</li>
              <li>The system searches your evidence database for relevant documents</li>
              <li>AI generates a professional opposition paragraph with citations</li>
              <li>Review, edit, and copy the opposition into your court filing</li>
              <li>Export the complete package with exhibits and supporting evidence</li>
            </ol>
          </div>
        )}
      </div>
    </div>
  );
}
