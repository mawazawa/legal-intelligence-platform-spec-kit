"use client";

import React, { useState } from 'react';
import { Loader2, FileText, CheckCircle, AlertCircle, Copy, Download } from 'lucide-react';
import type { OppositionResult, CaseContext } from '@/types/opposition';

const DEFAULT_CASE: CaseContext = {
  caseNumber: 'FDI-21-794666',
  respondentName: 'Mathieu Wauters',
  courtName: 'San Francisco Superior Court'
};

export default function OppositionAssistantPage() {
  const [claim, setClaim] = useState('');
  const [caseContext, setCaseContext] = useState<CaseContext>(DEFAULT_CASE);
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<OppositionResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!claim.trim()) {
      setError('Please enter a claim to oppose');
      return;
    }

    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch('/api/opposition/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ claim: claim.trim(), caseContext })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate opposition');
      }

      setResult(await response.json());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error('Copy failed:', err);
    }
  };

  const exportAsText = () => {
    if (!result) return;

    const text = `OPPOSITION TO CLAIM
Case: ${caseContext.caseNumber || 'N/A'}
Generated: ${new Date().toLocaleDateString()}

CLAIM: ${result.claim}

OPPOSITION:
${result.opposition.paragraphs.join('\n\n')}

LEGAL STANDARDS: ${result.opposition.legalStandards.join(', ')}
CITATIONS: ${result.opposition.citations.join(', ')}
EXHIBITS: ${result.opposition.exhibits.map(e => `${e.label}: ${e.description}`).join('; ')}

EVIDENCE (${result.evidence.length} documents):
${result.evidence.map((e, i) => `${i + 1}. ${e.source} (${(e.similarity * 100).toFixed(0)}% match)`).join('\n')}

Generated by Opposition Assistant | ${result.metadata.processingTime}ms`;

    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `opposition_${caseContext.caseNumber}_${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 p-6">
      <div className="max-w-6xl mx-auto">
        <Header />
        <InputForm
          claim={claim}
          setClaim={setClaim}
          caseContext={caseContext}
          setCaseContext={setCaseContext}
          isLoading={isLoading}
          onSubmit={handleSubmit}
        />
        {error && <ErrorBanner message={error} />}
        {result && (
          <ResultsView
            result={result}
            copiedSection={copiedSection}
            onCopy={copyToClipboard}
            onExport={exportAsText}
          />
        )}
        {!result && !isLoading && <HelpSection />}
      </div>
    </div>
  );
}

function Header() {
  return (
    <div className="mb-8">
      <h1 className="text-4xl font-bold text-gray-900 mb-2">Opposition Filing Assistant</h1>
      <p className="text-lg text-gray-600">AI-powered opposition generation with evidence-based citations</p>
    </div>
  );
}

interface InputFormProps {
  claim: string;
  setClaim: (c: string) => void;
  caseContext: CaseContext;
  setCaseContext: (c: CaseContext) => void;
  isLoading: boolean;
  onSubmit: (e: React.FormEvent) => void;
}

function InputForm({ claim, setClaim, caseContext, setCaseContext, isLoading, onSubmit }: InputFormProps) {
  return (
    <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
      <form onSubmit={onSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Input
            label="Case Number"
            value={caseContext.caseNumber || ''}
            onChange={(v) => setCaseContext({ ...caseContext, caseNumber: v })}
            placeholder="FDI-21-794666"
          />
          <Input
            label="Respondent Name"
            value={caseContext.respondentName || ''}
            onChange={(v) => setCaseContext({ ...caseContext, respondentName: v })}
            placeholder="Your name"
          />
          <Input
            label="Petitioner Name"
            value={caseContext.petitionerName || ''}
            onChange={(v) => setCaseContext({ ...caseContext, petitionerName: v })}
            placeholder="Opposing party"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Opposing Party&apos;s Claim
            <span className="text-gray-500 ml-2 font-normal">(Enter false/misleading claim)</span>
          </label>
          <textarea
            value={claim}
            onChange={(e) => setClaim(e.target.value)}
            rows={6}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
            placeholder='Example: "Respondent did not preserve tax forms as required by California Family Code ยง2621"'
          />
          <div className="flex justify-between items-center mt-2">
            <span className="text-sm text-gray-500">{claim.length} / 2000 characters</span>
            <button
              type="submit"
              disabled={isLoading || !claim.trim()}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
            >
              {isLoading ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4" />
                  Generate Opposition
                </>
              )}
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}

function Input({ label, value, onChange, placeholder }: { label: string; value: string; onChange: (v: string) => void; placeholder: string }) {
  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">{label}</label>
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder={placeholder}
      />
    </div>
  );
}

function ErrorBanner({ message }: { message: string }) {
  return (
    <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-start gap-3">
      <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
      <div>
        <h3 className="font-semibold text-red-900">Error</h3>
        <p className="text-red-700">{message}</p>
      </div>
    </div>
  );
}

interface ResultsViewProps {
  result: OppositionResult;
  copiedSection: string | null;
  onCopy: (text: string, section: string) => void;
  onExport: () => void;
}

function ResultsView({ result, copiedSection, onCopy, onExport }: ResultsViewProps) {
  return (
    <div className="space-y-6">
      <SuccessBanner evidenceCount={result.evidence.length} processingTime={result.metadata.processingTime} onExport={onExport} />

      <Section
        title="Opposition Statement"
        onCopy={() => onCopy(result.opposition.paragraphs.join('\n\n'), 'paragraphs')}
        copied={copiedSection === 'paragraphs'}
      >
        {result.opposition.paragraphs.map((p, i) => (
          <p key={i} className="mb-4 text-gray-800 leading-relaxed">{p}</p>
        ))}
      </Section>

      {result.opposition.legalStandards.length > 0 && (
        <Section
          title="Legal Standards"
          onCopy={() => onCopy(result.opposition.legalStandards.join('\n'), 'standards')}
          copied={copiedSection === 'standards'}
        >
          {result.opposition.legalStandards.map((s, i) => (
            <li key={i} className="text-gray-700 font-mono text-sm">{s}</li>
          ))}
        </Section>
      )}

      {result.opposition.citations.length > 0 && (
        <Section
          title="Citations"
          onCopy={() => onCopy(result.opposition.citations.join('\n'), 'citations')}
          copied={copiedSection === 'citations'}
        >
          {result.opposition.citations.map((c, i) => (
            <li key={i} className="text-gray-700 text-sm">{c}</li>
          ))}
        </Section>
      )}

      {result.opposition.exhibits.length > 0 && (
        <Section title="Suggested Exhibits">
          {result.opposition.exhibits.map((e, i) => (
            <div key={i} className="border border-gray-200 rounded-lg p-4 mb-3">
              <div className="font-semibold text-gray-900">{e.label}</div>
              <div className="text-sm text-gray-600 mt-1">{e.description}</div>
            </div>
          ))}
        </Section>
      )}

      <Section title={`Supporting Evidence (${result.evidence.length} documents)`}>
        {result.evidence.slice(0, 5).map((e, i) => (
          <div key={e.id} className="border border-gray-200 rounded-lg p-4 mb-4">
            <div className="flex justify-between items-start mb-2">
              <div className="font-semibold text-gray-900">{i + 1}. {e.source}</div>
              <div className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-semibold">
                {(e.similarity * 100).toFixed(1)}% match
              </div>
            </div>
            <div className="text-sm text-gray-700 bg-gray-50 p-3 rounded mt-2 font-mono">
              {e.content.substring(0, 400)}{e.content.length > 400 && '...'}
            </div>
            {typeof e.metadata.date === 'string' && (
              <div className="text-xs text-gray-500 mt-2">Date: {e.metadata.date}</div>
            )}
          </div>
        ))}
        {result.evidence.length > 5 && (
          <div className="text-center text-gray-500 text-sm">+ {result.evidence.length - 5} more evidence documents</div>
        )}
      </Section>
    </div>
  );
}

function SuccessBanner({ evidenceCount, processingTime, onExport }: { evidenceCount: number; processingTime: number; onExport: () => void }) {
  return (
    <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
      <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
      <div className="flex-1">
        <h3 className="font-semibold text-green-900">Opposition Generated Successfully</h3>
        <p className="text-green-700 text-sm">Found {evidenceCount} pieces of supporting evidence in {processingTime}ms</p>
      </div>
      <button
        onClick={onExport}
        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2 transition-colors"
      >
        <Download className="w-4 h-4" />
        Export
      </button>
    </div>
  );
}

function Section({ title, onCopy, copied, children }: { title: string; onCopy?: () => void; copied?: boolean; children: React.ReactNode }) {
  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold text-gray-900">{title}</h2>
        {onCopy && (
          <button
            onClick={onCopy}
            className="px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Copy className="w-4 h-4" />
            {copied ? 'Copied!' : 'Copy'}
          </button>
        )}
      </div>
      <div className="prose max-w-none">{children}</div>
    </div>
  );
}

function HelpSection() {
  return (
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
      <h3 className="font-semibold text-blue-900 mb-2">How It Works</h3>
      <ol className="list-decimal list-inside space-y-2 text-blue-800 text-sm">
        <li>Enter the opposing party&apos;s claim that you want to refute</li>
        <li>The system searches your evidence database for relevant documents</li>
        <li>AI generates a professional opposition paragraph with citations</li>
        <li>Review, edit, and copy the opposition into your court filing</li>
        <li>Export the complete package with exhibits and supporting evidence</li>
      </ol>
    </div>
  );
}
